// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Sport.Models.Standings;
//
//    StandingsRounds standings = StandingsRounds.FromJson(result.strJson);

namespace Sport.Models.Standings
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class StandingsRounds
    {
        [JsonProperty("data")]
        public StandingsRoundsDatum[] Data { get; set; }
    }

    public partial class StandingsRoundsDatum
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        //[JsonProperty("name")]
        //public string Name { get; set; }

        //[JsonProperty("league_id")]
        //public long LeagueId { get; set; }

        [JsonProperty("season_id")]
        public long SeasonId { get; set; }

        [JsonProperty("round_id")]
        public long RoundId { get; set; }

        [JsonProperty("round_name")]
        public long RoundName { get; set; }

        //[JsonProperty("type")]
        //public string Type { get; set; }

        [JsonProperty("stage_id")]
        public long StageId { get; set; }

        //[JsonProperty("stage_name")]
        //public string StageName { get; set; }

        //[JsonProperty("resource")]
        //public string Resource { get; set; }

        [JsonProperty("standings")]
        public Standings Standings { get; set; }
    }

    public partial class Standings
    {
        [JsonProperty("data")]
        public StandingsDatum[] Data { get; set; }
    }

    public partial class StandingsDatum
    {
        [JsonProperty("position")]
        public long Position { get; set; }

        //[JsonProperty("team_id")]
        //public long TeamId { get; set; }

        //[JsonProperty("team_name")]
        //public string TeamName { get; set; }

        [JsonProperty("round_id")]
        public long RoundId { get; set; }

        [JsonProperty("round_name")]
        public long RoundName { get; set; }

        //[JsonProperty("group_id")]
        //public object GroupId { get; set; }

        //[JsonProperty("group_name")]
        //public object GroupName { get; set; }

        [JsonProperty("overall")]
        public Overall Overall { get; set; }

        [JsonProperty("home")]
        public Home Home { get; set; }

        [JsonProperty("away")]
        public Away Away { get; set; }

        [JsonProperty("total")]
        public Total Total { get; set; }

        //[JsonProperty("result")]
        //public string Result { get; set; }

        [JsonProperty("points")]
        public long Points { get; set; }

        //[JsonProperty("recent_form")]
        //public string RecentForm { get; set; }

        //[JsonProperty("status")]
        //public object Status { get; set; }

        [JsonProperty("team")]
        public Team Team { get; set; }
    }

    public partial class Away
    {
        [JsonProperty("games_played")]
        public long GamesPlayed { get; set; }

        [JsonProperty("won")]
        public long Won { get; set; }

        [JsonProperty("draw")]
        public long Draw { get; set; }

        [JsonProperty("lost")]
        public long Lost { get; set; }

        [JsonProperty("goals_scored")]
        public long GoalsScored { get; set; }

        [JsonProperty("goals_against")]
        public long GoalsAgainst { get; set; }

        [JsonProperty("points")]
        public long Points { get; set; }
    }

    public partial class Overall
    {
        [JsonProperty("games_played")]
        public int games_played { get; set; }

        [JsonProperty("won")]
        public int won { get; set; }

        [JsonProperty("draw")]
        public int draw { get; set; }

        [JsonProperty("lost")]
        public int lost { get; set; }

        [JsonProperty("goals_scored")]
        public int goals_scored { get; set; }

        [JsonProperty("goals_against")]
        public int goals_against { get; set; }

        [JsonProperty("points")]
        public int points { get; set; }
    }

    public class Home 
    {
        [JsonProperty("games_played")]
        public int games_played { get; set; }

        [JsonProperty("won")]
        public int won { get; set; }

        [JsonProperty("draw")]
        public int draw;

        [JsonProperty("lost")]
        public int lost;

        [JsonProperty("goals_scored")]
        public int goals_scored;

        [JsonProperty("goals_against")]
        public int goals_against;

        [JsonProperty("points")]
        public int points;
    }

    public partial class Team
    {
        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        //[JsonProperty("legacy_id")]
        //public long LegacyId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        //[JsonProperty("short_code")]
        //public string ShortCode { get; set; }

        //[JsonProperty("twitter")]
        //public object Twitter { get; set; }

        //[JsonProperty("country_id")]
        //public long CountryId { get; set; }

        //[JsonProperty("national_team")]
        //public bool NationalTeam { get; set; }

        //[JsonProperty("founded")]
        //public long Founded { get; set; }

        [JsonProperty("logo_path")]
        public Uri LogoPath { get; set; }

        //[JsonProperty("venue_id")]
        //public long VenueId { get; set; }

        //[JsonProperty("current_season_id")]
        //public long CurrentSeasonId { get; set; }

        //[JsonProperty("is_placeholder")]
        //public bool IsPlaceholder { get; set; }
    }

    public partial class Total
    {
        [JsonProperty("goal_difference")]
        public string GoalDifference { get; set; }

        [JsonProperty("points")]
        public long Points { get; set; }
    }

 
    public partial class StandingsRounds
    {
        public static StandingsRounds FromJson(string json) => JsonConvert.DeserializeObject<StandingsRounds>(json, Sport.Models.Standings.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this StandingsRounds self) => JsonConvert.SerializeObject(self, Sport.Models.Standings.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

