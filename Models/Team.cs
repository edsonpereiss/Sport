// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Sport.Models.Teams;
//
//    var team = Team.FromJson(jsonString);

namespace Sport.Models.Teams
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Team
    {
        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("legacy_id")]
        public long LegacyId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("short_code")]
        public object ShortCode { get; set; }

        [JsonProperty("twitter")]
        public object Twitter { get; set; }

        [JsonProperty("country_id")]
        public long CountryId { get; set; }

        [JsonProperty("national_team")]
        public bool NationalTeam { get; set; }

        [JsonProperty("founded")]
        public long Founded { get; set; }

        [JsonProperty("logo_path")]
        public Uri LogoPath { get; set; }

        [JsonProperty("venue_id")]
        public long VenueId { get; set; }

        [JsonProperty("current_season_id")]
        public long CurrentSeasonId { get; set; }

        [JsonProperty("is_placeholder")]
        public bool IsPlaceholder { get; set; }
    }

    public partial class Team
    {
        public static Team FromJson(string json) => JsonConvert.DeserializeObject<Team>(json, Sport.Models.Teams.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Team self) => JsonConvert.SerializeObject(self, Sport.Models.Teams.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
