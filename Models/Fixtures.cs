// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Sport.Models.Fixtures;
//
//    var fixture = Fixture.FromJson(jsonString);

namespace Sport.Models.Fixtures
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Fixture
    {
        [JsonProperty("data")]
        public FixtureData Data { get; set; }
    }

    public partial class FixtureData
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        //[JsonProperty("league_id")]
        //public long LeagueId { get; set; }

        //[JsonProperty("season_id")]
        //public long SeasonId { get; set; }

        //[JsonProperty("stage_id")]
        //public long StageId { get; set; }

        [JsonProperty("round_id")]
        public long RoundId { get; set; }

        [JsonProperty("group_id")]
        public long GroupId { get; set; }

        //[JsonProperty("aggregate_id")]
        //public object AggregateId { get; set; }

        [JsonProperty("venue_id")]
        public long VenueId { get; set; }

        [JsonProperty("referee_id")]
        public long RefereeId { get; set; }

        [JsonProperty("localteam_id")]
        public long LocalteamId { get; set; }

        [JsonProperty("visitorteam_id")]
        public long VisitorteamId { get; set; }

        [JsonProperty("winner_team_id")]
        public long WinnerTeamId { get; set; }

        [JsonProperty("weather_report")]
        public WeatherReport WeatherReport { get; set; }

        [JsonProperty("commentaries")]
        public bool Commentaries { get; set; }

        //[JsonProperty("attendance")]
        //public long Attendance { get; set; }

        //[JsonProperty("pitch")]
        //public object Pitch { get; set; }

        //[JsonProperty("details")]
        //public string Details { get; set; }

        //[JsonProperty("neutral_venue")]
        //public bool NeutralVenue { get; set; }

        //[JsonProperty("winning_odds_calculated")]
        //public bool WinningOddsCalculated { get; set; }

        [JsonProperty("formations")]
        public Formations Formations { get; set; }

        [JsonProperty("scores")]
        public Scores Scores { get; set; }

        [JsonProperty("time")]
        public Time Time { get; set; }

        [JsonProperty("coaches")]
        public Coaches Coaches { get; set; }

        [JsonProperty("standings")]
        public Standings Standings { get; set; }

        [JsonProperty("assistants")]
        public Assistants Assistants { get; set; }

        [JsonProperty("leg")]
        public string Leg { get; set; }

        [JsonProperty("colors")]
        public Colors Colors { get; set; }

        [JsonProperty("deleted")]
        public bool Deleted { get; set; }

        [JsonProperty("is_placeholder")]
        public bool IsPlaceholder { get; set; }

        [JsonProperty("localTeam")]
        public LocalTeamClass LocalTeam { get; set; }

        [JsonProperty("visitorTeam")]
        public LocalTeamClass VisitorTeam { get; set; }

        [JsonProperty("lineup")]
        public Lineup Lineup { get; set; }

        [JsonProperty("bench")]
        public Bench Bench { get; set; }

        [JsonProperty("stats")]
        public DataStats Stats { get; set; }

        [JsonProperty("comments")]
        public Comments Comments { get; set; }

        [JsonProperty("highlights")]
        public Highlights Highlights { get; set; }

        [JsonProperty("referee")]
        public Referee Referee { get; set; }

        [JsonProperty("events")]
        public Events Events { get; set; }

        [JsonProperty("venue")]
        public Venue Venue { get; set; }

        [JsonProperty("localCoach")]
        public Coach LocalCoach { get; set; }

        [JsonProperty("visitorCoach")]
        public Coach VisitorCoach { get; set; }
    }

    public partial class Assistants
    {
        [JsonProperty("first_assistant_id")]
        public long FirstAssistantId { get; set; }

        [JsonProperty("second_assistant_id")]
        public long SecondAssistantId { get; set; }

        [JsonProperty("fourth_official_id")]
        public long FourthOfficialId { get; set; }
    }

    public partial class Bench
    {
        [JsonProperty("data")]
        public BenchDatum[] Data { get; set; }
    }

    public partial class BenchDatum
    {
        [JsonProperty("team_id")]
        public long TeamId { get; set; }

        [JsonProperty("fixture_id")]
        public long FixtureId { get; set; }

        [JsonProperty("player_id")]
        public long PlayerId { get; set; }

        [JsonProperty("player_name")]
        public string PlayerName { get; set; }

        [JsonProperty("number")]
        public long Number { get; set; }

        [JsonProperty("position")]
        public string Position { get; set; }

        [JsonProperty("additional_position")]
        public object AdditionalPosition { get; set; }

        [JsonProperty("formation_position")]
        public object FormationPosition { get; set; }

        [JsonProperty("posx")]
        public object Posx { get; set; }

        [JsonProperty("posy")]
        public object Posy { get; set; }

        [JsonProperty("captain")]
        public bool? Captain { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("stats")]
        public DatumStats Stats { get; set; }
    }

    public partial class DatumStats
    {
        [JsonProperty("shots")]
        public StatsShots Shots { get; set; }

        [JsonProperty("goals")]
        public Goals Goals { get; set; }

        [JsonProperty("fouls")]
        public Fouls Fouls { get; set; }

        [JsonProperty("cards")]
        public Cards Cards { get; set; }

        [JsonProperty("passing")]
        public Passing Passing { get; set; }

        [JsonProperty("dribbles")]
        public Dribbles Dribbles { get; set; }

        [JsonProperty("duels")]
        public Duels Duels { get; set; }

        [JsonProperty("other")]
        public Dictionary<string, long?> Other { get; set; }

        [JsonProperty("rating")]
        public string Rating { get; set; }
    }

    public partial class Cards
    {
        [JsonProperty("yellowcards")]
        public long Yellowcards { get; set; }

        [JsonProperty("redcards")]
        public long Redcards { get; set; }

        [JsonProperty("yellowredcards")]
        public long Yellowredcards { get; set; }
    }

    public partial class Dribbles
    {
        [JsonProperty("attempts")]
        public long? Attempts { get; set; }

        [JsonProperty("success")]
        public long? Success { get; set; }

        [JsonProperty("dribbled_past")]
        public long? DribbledPast { get; set; }
    }

    public partial class Duels
    {
        [JsonProperty("total")]
        public long? Total { get; set; }

        [JsonProperty("won")]
        public long? Won { get; set; }
    }

    public partial class Fouls
    {
        [JsonProperty("drawn")]
        public long? Drawn { get; set; }

        [JsonProperty("committed")]
        public long? Committed { get; set; }
    }

    public partial class Goals
    {
        [JsonProperty("scored")]
        public long Scored { get; set; }

        [JsonProperty("assists")]
        public long Assists { get; set; }

        [JsonProperty("conceded")]
        public long Conceded { get; set; }

        [JsonProperty("owngoals")]
        public long Owngoals { get; set; }
    }

    public partial class Passing
    {
        [JsonProperty("total_crosses")]
        public long? TotalCrosses { get; set; }

        [JsonProperty("crosses_accuracy")]
        public long? CrossesAccuracy { get; set; }

        [JsonProperty("passes")]
        public long? Passes { get; set; }

        [JsonProperty("accurate_passes")]
        public long? AccuratePasses { get; set; }

        [JsonProperty("passes_accuracy")]
        public long? PassesAccuracy { get; set; }

        [JsonProperty("key_passes")]
        public long? KeyPasses { get; set; }
    }

    public partial class StatsShots
    {
        [JsonProperty("shots_total")]
        public long? ShotsTotal { get; set; }

        [JsonProperty("shots_on_goal")]
        public long? ShotsOnGoal { get; set; }
    }

    public partial class Coaches
    {
        [JsonProperty("localteam_coach_id")]
        public long LocalteamCoachId { get; set; }

        [JsonProperty("visitorteam_coach_id")]
        public long VisitorteamCoachId { get; set; }
    }

    public partial class Colors
    {
        [JsonProperty("localteam")]
        public Team Localteam { get; set; }

        [JsonProperty("visitorteam")]
        public Team Visitorteam { get; set; }
    }

    public partial class Team
    {
        [JsonProperty("color")]
        public string Color { get; set; }

        [JsonProperty("kit_colors")]
        public string KitColors { get; set; }
    }

    public partial class Comments
    {
        [JsonProperty("data")]
        public CommentsDatum[] Data { get; set; }
    }

    public partial class CommentsDatum
    {
        [JsonProperty("fixture_id")]
        public long FixtureId { get; set; }

        [JsonProperty("important")]
        public bool Important { get; set; }

        [JsonProperty("order")]
        public long Order { get; set; }

        [JsonProperty("goal")]
        public bool Goal { get; set; }

        [JsonProperty("minute")]
        public long Minute { get; set; }

        [JsonProperty("extra_minute")]
        public long? ExtraMinute { get; set; }

        [JsonProperty("comment")]
        public string Comment { get; set; }
    }

    public partial class Events
    {
        [JsonProperty("data")]
        public EventsDatum[] Data { get; set; }
    }

    public partial class EventsDatum
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("team_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TeamId { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("var_result")]
        public string VarResult { get; set; }

        [JsonProperty("fixture_id")]
        public long FixtureId { get; set; }

        [JsonProperty("player_id")]
        public long PlayerId { get; set; }

        [JsonProperty("player_name")]
        public string PlayerName { get; set; }

        [JsonProperty("related_player_id")]
        public long? RelatedPlayerId { get; set; }

        [JsonProperty("related_player_name")]
        public string RelatedPlayerName { get; set; }

        [JsonProperty("minute")]
        public long Minute { get; set; }

        [JsonProperty("extra_minute")]
        public long? ExtraMinute { get; set; }

        [JsonProperty("reason")]
        public string Reason { get; set; }

        [JsonProperty("injuried")]
        public object Injuried { get; set; }

        [JsonProperty("result")]
        public string Result { get; set; }

        [JsonProperty("on_pitch")]
        public bool OnPitch { get; set; }
    }

    public partial class Formations
    {
        [JsonProperty("localteam_formation")]
        public string LocalteamFormation { get; set; }

        [JsonProperty("visitorteam_formation")]
        public string VisitorteamFormation { get; set; }
    }

    public partial class Highlights
    {
        [JsonProperty("data")]
        public HighlightsDatum[] Data { get; set; }
    }

    public partial class HighlightsDatum
    {
        [JsonProperty("fixture_id")]
        public long FixtureId { get; set; }

        [JsonProperty("event_id")]
        public object EventId { get; set; }

        [JsonProperty("location")]
        public Uri Location { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("created_at")]
        public CreatedAt CreatedAt { get; set; }
    }

    public partial class CreatedAt
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("timezone_type")]
        public long TimezoneType { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }
    }

    public partial class Lineup
    {
        [JsonProperty("data")]
        public LineupDatum[] Data { get; set; }
    }

    public partial class LineupDatum
    {
        [JsonProperty("team_id")]
        public long TeamId { get; set; }

        [JsonProperty("fixture_id")]
        public long FixtureId { get; set; }

        [JsonProperty("player_id")]
        public long PlayerId { get; set; }

        [JsonProperty("player_name")]
        public string PlayerName { get; set; }

        [JsonProperty("number")]
        public long Number { get; set; }

        [JsonProperty("position")]
        public string Position { get; set; }

        [JsonProperty("additional_position")]
        public object AdditionalPosition { get; set; }

        [JsonProperty("formation_position")]
        public long FormationPosition { get; set; }

        [JsonProperty("posx")]
        public object Posx { get; set; }

        [JsonProperty("posy")]
        public object Posy { get; set; }

        [JsonProperty("captain")]
        public bool Captain { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("stats")]
        public DatumStats Stats { get; set; }
    }

    public partial class Coach
    {
        [JsonProperty("data")]
        public LocalCoachData Data { get; set; }
    }

    public partial class LocalCoachData
    {
        [JsonProperty("coach_id")]
        public long CoachId { get; set; }

        [JsonProperty("team_id")]
        public long TeamId { get; set; }

        [JsonProperty("common_name")]
        public string CommonName { get; set; }

        [JsonProperty("fullname")]
        public string Fullname { get; set; }

        [JsonProperty("nationality")]
        public string Nationality { get; set; }

        [JsonProperty("image_path")]
        public Uri ImagePath { get; set; }
    }

    public partial class LocalTeamClass
    {
        [JsonProperty("data")]
        public LocalTeamData Data { get; set; }
    }

    public partial class LocalTeamData
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("legacy_id")]
        public long LegacyId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("short_code")]
        public string ShortCode { get; set; }

        [JsonProperty("twitter")]
        public object Twitter { get; set; }

        [JsonProperty("country_id")]
        public long CountryId { get; set; }

        [JsonProperty("national_team")]
        public bool NationalTeam { get; set; }

        [JsonProperty("founded")]
        public long Founded { get; set; }

        [JsonProperty("logo_path")]
        public Uri LogoPath { get; set; }

        [JsonProperty("venue_id")]
        public long VenueId { get; set; }

        [JsonProperty("current_season_id")]
        public long CurrentSeasonId { get; set; }

        [JsonProperty("is_placeholder")]
        public object IsPlaceholder { get; set; }
    }

    public partial class Referee
    {
        [JsonProperty("data")]
        public RefereeData Data { get; set; }
    }

    public partial class RefereeData
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("common_name")]
        public string CommonName { get; set; }

        [JsonProperty("fullname")]
        public string Fullname { get; set; }
    }

    public partial class Scores
    {
        [JsonProperty("localteam_score")]
        public long LocalteamScore { get; set; }

        [JsonProperty("visitorteam_score")]
        public long VisitorteamScore { get; set; }

        [JsonProperty("localteam_pen_score")]
        public object LocalteamPenScore { get; set; }

        [JsonProperty("visitorteam_pen_score")]
        public object VisitorteamPenScore { get; set; }

        [JsonProperty("ht_score")]
        public string HtScore { get; set; }

        [JsonProperty("ft_score")]
        public string FtScore { get; set; }

        [JsonProperty("et_score")]
        public object EtScore { get; set; }

        [JsonProperty("ps_score")]
        public object PsScore { get; set; }
    }

    public partial class Standings
    {
        [JsonProperty("localteam_position")]
        public long LocalteamPosition { get; set; }

        [JsonProperty("visitorteam_position")]
        public long VisitorteamPosition { get; set; }
    }

    public partial class DataStats
    {
        [JsonProperty("data")]
        public StatsDatum[] Data { get; set; }
    }

    public partial class StatsDatum
    {
        [JsonProperty("team_id")]
        public long TeamId { get; set; }

        [JsonProperty("fixture_id")]
        public long FixtureId { get; set; }

        [JsonProperty("shots")]
        public DatumShots Shots { get; set; }

        [JsonProperty("passes")]
        public Passes Passes { get; set; }

        [JsonProperty("attacks")]
        public Attacks Attacks { get; set; }

        [JsonProperty("fouls")]
        public long Fouls { get; set; }

        [JsonProperty("corners")]
        public long Corners { get; set; }

        [JsonProperty("offsides")]
        public long Offsides { get; set; }

        [JsonProperty("possessiontime")]
        public long Possessiontime { get; set; }

        [JsonProperty("yellowcards")]
        public long Yellowcards { get; set; }

        [JsonProperty("redcards")]
        public long Redcards { get; set; }

        [JsonProperty("yellowredcards")]
        public long Yellowredcards { get; set; }

        [JsonProperty("saves")]
        public long Saves { get; set; }

        [JsonProperty("substitutions")]
        public long Substitutions { get; set; }

        [JsonProperty("goal_kick")]
        public long GoalKick { get; set; }

        [JsonProperty("goal_attempts")]
        public long GoalAttempts { get; set; }

        [JsonProperty("free_kick")]
        public long FreeKick { get; set; }

        [JsonProperty("throw_in")]
        public long ThrowIn { get; set; }

        [JsonProperty("ball_safe")]
        public long BallSafe { get; set; }

        [JsonProperty("goals")]
        public long Goals { get; set; }

        [JsonProperty("penalties")]
        public long Penalties { get; set; }

        [JsonProperty("injuries")]
        public long Injuries { get; set; }

        [JsonProperty("tackles")]
        public long Tackles { get; set; }
    }

    public partial class Attacks
    {
        [JsonProperty("attacks")]
        public long AttacksAttacks { get; set; }

        [JsonProperty("dangerous_attacks")]
        public long DangerousAttacks { get; set; }
    }

    public partial class Passes
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("accurate")]
        public long Accurate { get; set; }

        [JsonProperty("percentage")]
        public double Percentage { get; set; }
    }

    public partial class DatumShots
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("ongoal")]
        public long Ongoal { get; set; }

        [JsonProperty("blocked")]
        public long Blocked { get; set; }

        [JsonProperty("offgoal")]
        public long Offgoal { get; set; }

        [JsonProperty("insidebox")]
        public long Insidebox { get; set; }

        [JsonProperty("outsidebox")]
        public long Outsidebox { get; set; }
    }

    public partial class Time
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("starting_at")]
        public StartingAt StartingAt { get; set; }

        [JsonProperty("minute")]
        public long Minute { get; set; }

        [JsonProperty("second")]
        public object Second { get; set; }

        [JsonProperty("added_time")]
        public object AddedTime { get; set; }

        [JsonProperty("extra_minute")]
        public object ExtraMinute { get; set; }

        [JsonProperty("injury_time")]
        public object InjuryTime { get; set; }
    }

    public partial class StartingAt
    {
        [JsonProperty("date_time")]
        public DateTimeOffset DateTime { get; set; }

        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("time")]
        public DateTimeOffset Time { get; set; }

        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }
    }

    public partial class Venue
    {
        [JsonProperty("data")]
        public VenueData Data { get; set; }
    }

    public partial class VenueData
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("surface")]
        public string Surface { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("capacity")]
        public long Capacity { get; set; }

        [JsonProperty("image_path")]
        public Uri ImagePath { get; set; }

        [JsonProperty("coordinates")]
        public string Coordinates { get; set; }
    }

    public partial class WeatherReport
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("icon")]
        public Uri Icon { get; set; }

        [JsonProperty("temperature")]
        public Temperature Temperature { get; set; }

        [JsonProperty("temperature_celcius")]
        public Temperature TemperatureCelcius { get; set; }

        [JsonProperty("clouds")]
        public string Clouds { get; set; }

        [JsonProperty("humidity")]
        public string Humidity { get; set; }

        [JsonProperty("pressure")]
        public long Pressure { get; set; }

        [JsonProperty("wind")]
        public Wind Wind { get; set; }

        [JsonProperty("coordinates")]
        public Coordinates Coordinates { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }
    }

    public partial class Coordinates
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }
    }

    public partial class Temperature
    {
        [JsonProperty("temp")]
        public double Temp { get; set; }

        [JsonProperty("unit")]
        public string Unit { get; set; }
    }

    public partial class Wind
    {
        [JsonProperty("speed")]
        public string Speed { get; set; }

        [JsonProperty("degree")]
        public long Degree { get; set; }
    }

    public partial class Fixture
    {
        public static Fixture FromJson(string json) => JsonConvert.DeserializeObject<Fixture>(json, Sport.Models.Fixtures.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Fixture self) => JsonConvert.SerializeObject(self, Sport.Models.Fixtures.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }


}
